{"version":3,"sources":["Teethsales.js","Procedures.js","ProceduresSearch.js","Home.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["Teethsales","Procedures","ProceduresSearch","state","procedures","name","description","cost","Infinity","searchTerm","this","props","match","params","query","toLowerCase","results","filter","proc","includes","console","log","map","r","key","React","Component","Home","searchText","handleInput","event","setState","target","value","handleSubmit","route","history","push","type","onChange","onClick","Contact","App","className","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAWeA,EATI,WACjB,OACE,6BACE,2CACA,oHCOSC,EAXI,WAEjB,OACE,6BACE,0CACA,mHAAwF,8CAAxF,OCyDSC,E,2MA3DbC,MAAQ,CACNC,WAAY,CACV,CACEC,KAAM,aACNC,YAAa,sCACbC,KAAM,KAER,CACEF,KAAM,aACNC,YAAa,gEACbC,KAAM,KAER,CACEF,KAAM,iBACNC,YAAa,oDACbC,MAAO,KAET,CACEF,KAAM,oBACNC,YAAa,qBACbC,KAAMC,O,wEAQV,IAAMC,EAAaC,KAAKC,MAAMC,MAAMC,OAAOC,MAAMC,cAE3CC,EAAUN,KAAKP,MAAMC,WAAWa,QAAQ,SAAAC,GAE5C,OAAOA,EAAKb,KAAKU,cAAcI,SAAUV,MAQ3C,OAHAW,QAAQC,IAAI,WAAYL,GAItB,6BACE,uDAA6BN,KAAKC,MAAMC,MAAMC,OAAOC,MAArD,KAEA,4BAEEE,EAAQM,KAAK,SAAAC,GAAC,OACZ,wBAAIC,IAAKD,EAAElB,MACRkB,EAAElB,KADL,OACekB,EAAEhB,e,GAnDEkB,IAAMC,WCgCtBC,E,2MA5BbxB,MAAQ,CACNyB,WAAY,I,EAGdC,YAAc,SAACC,GAEb,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAAOC,S,EAG3CC,aAAe,WACb,IAAMC,EAAK,6BAA0B,EAAKhC,MAAMyB,YAChDR,QAAQC,IAAI,aAAcc,GAC1B,EAAKxB,MAAMyB,QAAQC,KAAMF,I,wEAKzB,OACE,6BACE,2BAAOG,KAAK,OAAOC,SAAW7B,KAAKmB,cACnC,4BAAQW,QAAU9B,KAAKwB,cAAvB,qBACA,mF,GAzBWT,IAAMC,WCUVe,EAVC,WAEd,OACE,6BACE,0CCmDSC,E,iLArCX,OACE,yBAAKC,UAAU,OACb,8DACA,6BACA,kBAAC,IAAD,KACA,6BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QADF,UAEE,kBAAC,IAAD,CAAMA,GAAG,eAAT,cAFF,SAGE,kBAAC,IAAD,CAAMA,GAAG,YAAT,cAHF,SAIE,kBAAC,IAAD,CAAMA,GAAG,cAAT,eACA,8BAEF,6BAOE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYpB,IAClC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,cAAcC,UAAY9C,IAC5C,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,4BAA4BC,UAAY7C,IAC1D,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,aAAaC,UAAY/C,IAC3C,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,WAAWC,UAAYN,KAG3C,6BACA,6BACF,2E,GAhCYhB,IAAMC,WCJJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvC,MACvB,2DCZNwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.79885489.chunk.js","sourcesContent":["import React from 'react';\n\nconst Teethsales = () => {\n  return (\n    <div>\n      <h2>Teeth Sales</h2>\n      <p>Did you know that you can use old teeth to decorate your house? Start today! Start.</p>\n    </div>\n  );\n} // Teethsales\n\nexport default Teethsales;\n","import React from 'react';\n\nconst Procedures = () => {\n\n  return (\n    <div>\n      <h2>Procedures</h2>\n      <p>Learn more about our extensive range of dental procedures here! Why not start with a <strong>Root Canal</strong>!</p>\n    </div>\n  )\n\n}\n\nexport default Procedures\n","import React from 'react';\n\nclass ProceduresSearch extends React.Component {\n\n  // fake database / api results\n  state = {\n    procedures: [\n      {\n        name: 'Extraction',\n        description: 'Yank out that bad boy! Who needs it',\n        cost: 1000\n      },\n      {\n        name: 'Root Canal',\n        description: 'Long, painful, intense. For lovers of extreme dentistry only.',\n        cost: 10000\n      },\n      {\n        name: 'Jaw Extraction',\n        description: 'Lose that heavy baggage! Fluids only from now on!',\n        cost: -1000\n      },\n      {\n        name: 'Wallet Extraction',\n        description: 'I am taking it all',\n        cost: Infinity\n      },\n\n    ]\n  }\n\n  render() {\n\n    const searchTerm = this.props.match.params.query.toLowerCase();\n\n    const results = this.state.procedures.filter( proc => {\n      // items from the array for which this function returns true will be included in the output array\n      return proc.name.toLowerCase().includes( searchTerm );\n    })\n\n\n\n    console.log('results:', results );\n\n\n    return (\n      <div>\n        <h2>Procedures Results for \"{this.props.match.params.query}\"</h2>\n\n        <ul>\n        {\n          results.map( r => (\n            <li key={r.name}>\n              {r.name} - ${r.cost}\n            </li>\n          ))\n        }\n        </ul>\n      </div>\n    )\n  } // render\n\n} // end of Procedures\n\nexport default ProceduresSearch\n","import React from 'react';\n\nclass Home extends React.Component {\n\n  // You dont actually need a constructor to initialize state.\n  // You can use this shorthand:\n  state = {\n    searchText: ''\n  };\n\n  handleInput = (event) => {\n    // console.log(event.target.value);\n    this.setState({ searchText: event.target.value })\n  }\n\n  handleSubmit = () => {\n    const route = `/procedures/search/${ this.state.searchText }`\n    console.log('new route:', route);\n    this.props.history.push( route )\n  }\n\n  render(){\n\n    return (\n      <div>\n        <input type=\"text\" onChange={ this.handleInput } />\n        <button onClick={ this.handleSubmit }>Search Procedures</button>\n        <p>I am a good dentist. Let me look in your mouth.</p>\n      </div>\n    );\n\n  } // render\n} // Home\n\nexport default Home;\n","import React from 'react';\n\nconst Contact = () => {\n\n  return (\n    <div>\n      <h2>Contact.</h2>\n    </div>\n  )\n\n};\n\nexport default Contact\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport {\n  Route,\n  Link,\n  HashRouter as Router\n} from 'react-router-dom'\n\nimport Teethsales from './Teethsales'\nimport Procedures from './Procedures'\nimport ProceduresSearch from './ProceduresSearch'\nimport Home from './Home'\nimport Contact from './Contact'\n\nclass App extends React.Component {\n\n  render(){\n\n    return(\n      <div className=\"App\">\n        <h1>Let Me Your Dentist. I insist.</h1>\n        <hr/>\n        <Router>\n        <nav>\n          <Link to=\"/\">Home</Link> | &nbsp;\n          <Link to=\"/procedures\">Procedures</Link> |&nbsp;\n          <Link to=\"/contact\">Contact Us</Link> |&nbsp;\n          <Link to=\"/teethshop\">Teeth Sales</Link>\n          <br/>\n        </nav>\n        <br/>\n\n\n        {\n          // Like rails routes.rb:\n          //    get '/' => 'pages#home'\n        }\n          <Route exact path=\"/\" component={ Home }/>\n          <Route exact path=\"/procedures\" component={ Procedures }/>\n          <Route exact path=\"/procedures/search/:query\" component={ ProceduresSearch }/>\n          <Route exact path=\"/teethshop\" component={ Teethsales }/>\n          <Route exact path=\"/contact\" component={ Contact }/>\n        </Router>\n\n        <hr/>\n        <br/>\n      <footer>\n        &copy; 2020 Unsettling Professionals\n      </footer>\n    </div>\n    );\n  } // render()\n\n} // class App\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}